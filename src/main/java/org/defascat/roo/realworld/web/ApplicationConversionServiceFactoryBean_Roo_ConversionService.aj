// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.defascat.roo.realworld.web;

import org.defascat.roo.realworld.domain.Server;
import org.defascat.roo.realworld.domain.Version;
import org.defascat.roo.realworld.web.ApplicationConversionServiceFactoryBean;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;
    
    public Converter<Server, String> ApplicationConversionServiceFactoryBean.getServerToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<org.defascat.roo.realworld.domain.Server, java.lang.String>() {
            public String convert(Server server) {
                return new StringBuilder().append(server.getName()).toString();
            }
        };
    }
    
    public Converter<Long, Server> ApplicationConversionServiceFactoryBean.getIdToServerConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, org.defascat.roo.realworld.domain.Server>() {
            public org.defascat.roo.realworld.domain.Server convert(java.lang.Long id) {
                return Server.findServer(id);
            }
        };
    }
    
    public Converter<String, Server> ApplicationConversionServiceFactoryBean.getStringToServerConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, org.defascat.roo.realworld.domain.Server>() {
            public org.defascat.roo.realworld.domain.Server convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Server.class);
            }
        };
    }
    
    public Converter<Version, String> ApplicationConversionServiceFactoryBean.getVersionToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<org.defascat.roo.realworld.domain.Version, java.lang.String>() {
            public String convert(Version version) {
                return new StringBuilder().append(version.getName()).toString();
            }
        };
    }
    
    public Converter<Long, Version> ApplicationConversionServiceFactoryBean.getIdToVersionConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, org.defascat.roo.realworld.domain.Version>() {
            public org.defascat.roo.realworld.domain.Version convert(java.lang.Long id) {
                return Version.findVersion(id);
            }
        };
    }
    
    public Converter<String, Version> ApplicationConversionServiceFactoryBean.getStringToVersionConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, org.defascat.roo.realworld.domain.Version>() {
            public org.defascat.roo.realworld.domain.Version convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Version.class);
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getServerToStringConverter());
        registry.addConverter(getIdToServerConverter());
        registry.addConverter(getStringToServerConverter());
        registry.addConverter(getVersionToStringConverter());
        registry.addConverter(getIdToVersionConverter());
        registry.addConverter(getStringToVersionConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
